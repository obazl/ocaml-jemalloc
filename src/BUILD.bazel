load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")
load("@rules_foreign_cc//tools/build_defs:configure.bzl", "configure_make")

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_signature",
    "ocaml_module",
    "ocaml_ns_archive",
)

#################
ocaml_ns_archive(
    name = "jemalloc",
    submodules = [
        ":_Jemalloc"
    ],
    visibility = ["//visibility:public"]
)

#############
ocaml_module(
    name   = "_Jemalloc",
    struct = "jemalloc.ml",
    sig    = ":_Jemalloc.cmi",
    opts   = ["-linkall"],
    cc_deps = {
        # on macos, using dynamic: dyld: Library not loaded, Reason: image not found
        ":jemalloc_stubs": "static",
        ":libjemalloc"   : "static"
    },
)

################
ocaml_signature(
    name = "_Jemalloc.cmi",
    src = "jemalloc.mli",
)

cc_library(
    name  = "jemalloc_stubs",
    srcs  = ["jemalloc_stubs.c"],
    deps  = [
        "@ocaml//csdk/ctypes",
        ":libjemalloc"
    ],
    visibility = ["//visibility:public"]
)

###############
# Bazel makes it virtually impossible to use select with a dictionary,
# so we just duplicate:
ENV_VARS = select({
    "//bzl/host:macos": {
        "AR": "",
        "CFLAGS": "-DJEMALLOC_MANGLE"
        },
    "//bzl/host:linux": {
        # "CFLAGS": "-DJEMALLOC_NO_DEMANGLE"                  # => mallctl
        # "CFLAGS": "-DJEMALLOC_MANGLE"                       # => je_je_mallctl
        # "CFLAGS": "-DJEMALLOC_NO_RENAME"                        # => je_je_mallctl
        # "CFLAGS": "-DJEMALLOC_MANGLE -DJEMALLOC_NO_RENAME"  # => je_je_mallctl
        # "CFLAGS": "-DJEMALLOC_MANGLE -DJEMALLOC_NO_DEMANGLE"  # => je_je_mallctl
        # "CFLAGS": "-DJEMALLOC_MANGLE -DJEMALLOC_NO_DEMANGLE -DJEMALLOC_NO_RENAME" # => mallctl
        },
    # "//conditions:default": {
    #     "CFLAGS": "-DJEMALLOC_MANGLE"
    # }
})

configure_make(
    name = "libjemalloc",
    autogen = True,
    configure_in_place = True,
    configure_env_vars = ENV_VARS,
    defines = select({
        "//bzl/host:macos": ["JEMALLOC_MANGLE"],
        "//bzl/host:linux": [],
    }, no_match_error = "Unsupported platform. MacOS or Linux only."),
    lib_source = "@libjemalloc//:all",
    out_lib_dir = "lib",
    shared_libraries = select({
        "//bzl/host:macos": ["libjemalloc.dylib"],
        "//bzl/host:linux": ["libjemalloc.so"],
        "//conditions:default": ["libjemalloc.so"]
    }),
    static_libraries = [
        "libjemalloc.a",
    ],
    visibility = ["//visibility:public"],
)
